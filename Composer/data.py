from typing import List, Dict, TextIO
'Functions to help format the data files required for Composer.'
'To modify information in a Data object, modify their .txt files directly.'

# Change file locations depending on file transfer.
NOTES_FILE = 'C:/Users/shaoe/Documents/Coding Projects/Python Projects/Composer/data files/notes.txt'
KEYS_FILE = 'C:/Users/shaoe/Documents/Coding Projects/Python Projects/Composer/data files/keys.txt'
CHORDS_FILE = 'C:/Users/shaoe/Documents/Coding Projects/Python Projects/Composer/data files/chord blueprints.txt'


class Data:
    """A set of data on notes, their keys, and their enharmonic notes."""

    def __init__(self) -> None:
        """Initialize a set of data for composer.

        == Attributes ==
        key_to_notes: A dictionary of keys to all their distinct notes.
        note_to_enharmonic: A dictionary of double flat and sharp notes to their
        enharmonic notes.
        chord_to_method: A dictionary of chord types to their write method.
        """

        # Attribute types
        key_to_notes: Dict[str, List[str]]
        note_to_enharmonic: Dict[str, str]
        chord_to_method: Dict[str, str]

        file1 = open(KEYS_FILE, 'r')
        self.key_to_notes = self.format_keys(file1)
        file1.close()

        file2 = open(NOTES_FILE, 'r')
        self.note_to_enharmonic = self.get_specials(file2)
        file2.close()

        file3 = open(CHORDS_FILE, 'r')
        self.chord_to_method = self.write_methods(file3)
        file3.close()

    @staticmethod
    def write_methods(file: TextIO) -> Dict[str, str]:
        """Return a dictionary where each key is the name of a chord this
        program can write and each value is a method each key is referring to.

        Precondition: each line has two phrases separated by the string ': '
        and the string sequence after this string sequence must exist as a
        method in the chord class. There are no empty lines in file.
        """

        # A dictionary of chord names to their method names to return.
        chord_to_method = {}
        name_and_methods = file.readlines()

        for line in name_and_methods:
            # Split the line into name and method, and add to dictionary.
            info = line.strip('\n').split(': ')
            chord_to_method[info[0]] = info[1]

        return chord_to_method

    @staticmethod
    def get_specials(file: TextIO) -> Dict[str, str]:
        """Return a dictionary where each key is a special tone and each value
        is that special tone's enharmonic. Meant for use with notes.txt

        A special tone contains a double accidental.

        Preconditions: The first 2 lines in file have phrases separated by
        spaces and len(first line) == len(second line).
        """

        specials_to_enharmonic = {}

        specials = file.readline().split()
        enharmonics = file.readline().split()

        for i in range(len(specials)):
            specials_to_enharmonic[specials[i]] = enharmonics[i]

        return specials_to_enharmonic

    @staticmethod
    def format_keys(file: TextIO) -> Dict[str, List[str]]:
        """Return a dictionary key_to_notes where keys are base notes of a key
        and values are all semi-tones of their respective key using the
        data from file. Meant for use with keys.txt.

        Precondition: every line in file has format note: note note note ...
        """

        key_to_notes = {}
        lines = file.readlines()

        for line in lines:
            # A List of notes referring to its respective key.
            notes = []
            # Obtain the key of this set (line) of notes.
            key = line[:line.find(':')]

            # Append this key's notes to notes.
            i = line.find(' ')
            while i != -1:
                next_i = line.find(' ', i + 1)
                notes.append(line[i + 1:next_i])
                i = next_i

            key_to_notes[key] = notes

        return key_to_notes

    # A method used to neatly print key_to_notes (FOR TESTING PURPOSES ONLY).
    @staticmethod
    def print_format_keys(key_to_notes: Dict[str, List[str]]) -> None:
        """Print the dictionary generated by format_keys using file.
        Intended as a checker method for Data."""

        for root_note in key_to_notes:
            # A list of all the notes in the key of root_note.
            notes_list = ''

            for note in key_to_notes[root_note]:
                notes_list += note + ', '

            print(root_note + ': ' + notes_list)


if __name__ == '__main__':
    pass

    # Custom testing features for format_keys and get_specials.
    # Intended for user reading purposes ONLY.
    d = Data()
    print(d.note_to_enharmonic, '\n')
    print(d.chord_to_method, '\n')
    d.print_format_keys(d.key_to_notes)
